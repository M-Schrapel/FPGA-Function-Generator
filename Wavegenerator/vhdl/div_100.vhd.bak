library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

entity div_100 is
	port
	(
		clken		: in  std_logic ;
		clock		: in  std_logic ;
		--denom		: in  std_logic_vector (7 downto 0);
		numer		: in  std_logic_vector (16 downto 0);
		quotient	: out std_logic_vector (17 downto 0)
		--remain	: out std_logic_vector (7 downto 0)
	);
end div_100;


architecture rtl of div_100 is
--
--signal res_tmp			: std_logic_vector( numer'length+70 downto 0) := (others => '0');
--signal numer_tmp		: std_logic_vector(res_tmp'length-1 downto 0) := (others => '0');
--signal div_tmp			: std_logic_vector(res_tmp'length-1 downto 0) := (others => '0');
--signal div_int 		: std_logic_vector(res_tmp'length-1 downto 0) := (others => '0');

signal quotient_int 	: std_logic_vector(63 downto 0) := (others => '0');
signal numer_int 		: std_logic_vector(63 downto 0) := (others => '0');

begin
--	quotient_int 	<= std_logic_vector(shift_right(unsigned(div_int),6));
quotient			<= quotient_int(quotient'length-1 downto 0);
--	numer_tmp(numer'length-1 downto 0)<= numer;
--	numer_tmp(numer'length-1 downto numer'length)<= (others => '0');
numer_int(numer'length-1 downto 0)	<= numer;

-- OLD
	-- ff:
		-- process(clken,numer,clock)
				-- begin	
					-- if rising_edge(clock) then
						-- if clken = '1' then
							-- quotient	<= std_logic_vector(shift_right(unsigned(numer),7) + shift_right(unsigned(numer),9) + shift_right(unsigned(numer),12) + 1);
						-- else
							-- quotient	<= (others => '0');
						-- end if;
					-- end if;
	-- end process ff; 
-- NEW
	ff:
		process(clken,numer_int,clock)
				begin	
					if rising_edge(clock) then
						if clken = '1' then
							--quotient_int	<= std_logic_vector(shift_right(shift_left(unsigned(numer_int),1) + shift_left(unsigned(numer_int),2) + shift_left(unsigned(numer_int),3) + shift_left(unsigned(numer_int),5) + shift_left(unsigned(numer_int),7) + shift_left(unsigned(numer_int),8) + shift_left(unsigned(numer_int),9) + shift_left(unsigned(numer_int),10) + shift_left(unsigned(numer_int),14) + shift_left(unsigned(numer_int),16),23)+1);
							
							quotient_int	<= std_logic_vector(shift_right(shift_right(
							unsigned(numer_int) +
							shift_left(unsigned(numer_int), 1) + 
							shift_left(unsigned(numer_int), 2) + 
							shift_left(unsigned(numer_int), 3) + 
							shift_left(unsigned(numer_int), 5) + 
							shift_left(unsigned(numer_int), 7) + 
							shift_left(unsigned(numer_int), 8) + 
							shift_left(unsigned(numer_int), 9) + 
							shift_left(unsigned(numer_int),10) + 
							shift_left(unsigned(numer_int),14) 
							-- shift_left(unsigned(numer_int),19) + 
							-- shift_left(unsigned(numer_int),21) + 
							-- shift_left(unsigned(numer_int),23) + 
							-- shift_left(unsigned(numer_int),24) + 
							-- shift_left(unsigned(numer_int),25) + 
							-- shift_left(unsigned(numer_int),26) + 
							-- shift_left(unsigned(numer_int),30) + 
							-- shift_left(unsigned(numer_int),32)
							,16) + unsigned(numer_int),7));
							‭--0100011110101111‬
						
						else
							quotient_int	<= (others => '0');
						end if;
					end if;
	end process ff; 
	
--	ff:
--		process(clken,numer_tmp,clock)
--				begin	
--					if rising_edge(clock) then
--						if clken = '1' then
--							div_tmp	<= std_logic_vector(unsigned(numer_tmp) + shift_left(unsigned(numer_tmp),2) + shift_left(unsigned(numer_tmp),6) + shift_left(unsigned(numer_tmp),7) + shift_left(unsigned(numer_tmp),8) + shift_left(unsigned(numer_tmp),9) + shift_left(unsigned(numer_tmp),11) + shift_left(unsigned(numer_tmp),13) + shift_left(unsigned(numer_tmp),14) + shift_left(unsigned(numer_tmp),15) + shift_left(unsigned(numer_tmp),20) + shift_right(unsigned(numer_tmp),26) + shift_right(unsigned(numer_tmp),27) + shift_right(unsigned(numer_tmp),28) + shift_right(unsigned(numer_tmp),29) + shift_right(unsigned(numer_tmp),30));
--						else
--							div_tmp	<= (others => '0');
--						end if;
--					end if;
--	end process ff;
--	
--	ff2:
--		process(clken,numer_tmp,div_tmp)
--				begin	
--					--if rising_edge(clock) then
--						if clken = '1' then
--							div_int  <= std_logic_vector(shift_right(unsigned(numer_tmp) + shift_right(unsigned(div_tmp),32),1));
--							--div_int  <= std_logic_vector(shift_right(unsigned(div_tmp),25));
--							
--						else
--							div_int	<= (others => '0');
--						end if;
--					--end if;
--	end process ff2; 
end rtl;