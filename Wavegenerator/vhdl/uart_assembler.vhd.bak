library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library work;
use work.function_pkg.all;

entity uart_assembler is
	generic (
      BAUD_RATE   : integer := 115200; -- baud rate value
      PARITY_BIT  : string  := "none"; -- type of parity: "none", "even", "odd", "mark", "space"
		NUM_PORTS	: integer := 1;  	 -- Number of Ports
		PWM_STEPS	: integer := 512;  -- Number of Steps
		CLOCK_MHZ	: integer := 50;   -- Clock signal in MHZ
		AMP_STEPS	: integer := 255;	 -- Amplitude Divider (100 steps)
		MAX_FREQ		: integer := 512;	 -- Maximum Frequency of Output in Hz
		NUM_FUNCS	: integer := 5;	 -- Number of functions ( 0=sine, 1=triagle, 2=sawtooth, 3=rectangle, 4=custom)
		CALC_TICKS	: integer := 5		 -- internal number of clocks until result is valid
	);
	port(
		clock							: in	std_ulogic;
		reset							: in	std_ulogic;
		
		-- outgoing uart data
		data_uart_out     		: out std_logic_vector(7 downto 0); -- input data
      data_valid_out   			: out std_logic; -- when DATA_SEND = 1, input data are valid and will be transmit
      busy        				: out std_logic; -- when BUSY = 1, transmitter is busy and you must not set DATA_SEND to 1
      
		-- incoming uart data
      data_uart_in    			: in  std_logic_vector(7 downto 0); -- output data
      data_valid_in   			: in  std_logic; -- when DATA_VLD = 1, output data are valid
      frame_error 				: in  std_logic
		
		-- set single wave unit with UART data
		ext_request					: out std_ulogic := '0';
		type_request				: out	std_ulogic_vector(integer(ceil(log2(real((5)))))-1 downto 0); -- 0: function select -- 1: frequency select -- 2: multiplier select -- 3: phase select -- 4: request data
		wave_unit_select			: out std_ulogic_vector(max(integer(ceil(log2(real((NUM_PORTS*1))))),1) downto 0)  := (others => '0');
		function_select			: out std_ulogic_vector(max(integer(ceil(log2(real(NUM_FUNCS))))-1,1) downto 0)  := (others => '0');
		frequency_select			: out std_ulogic_vector(integer(ceil(log2(real(MAX_FREQ*1))))-1 downto 0)  := (others => '0');
		mult_select					: out std_ulogic_vector(integer(ceil(log2(real(AMP_STEPS*1))))-1 downto 0)  := (others => '0');
		phasereference_select	: out std_ulogic_vector(max(integer(ceil(log2(real(NUM_PORTS*1)))),1) downto 0)  := (others => '0');
		phase_value_select		: out std_ulogic_vector(8 downto 0)  := (others => '0');
		
		-- write to custom RAM
		write_custom_request		: out std_ulogic := '0';
		address_request			: out std_ulogic_vector(integer(ceil(log2(real(PWM_STEPS*1))))-1 downto 0) := (others => '0');
		pwm_value_request			: out std_ulogic_vector(integer(ceil(log2(real(PWM_STEPS*1))))-1 downto 0) := (others => '0');
		
		-- data was written
		ack_ext						: in  std_ulogic := '0';
		-- for requesting data via UART
		data_back					: in  std_ulogic_vector(integer(ceil(log2(real(PWM_STEPS*1))))-1 downto 0) := (others => '0')
		
	);
end uart_assembler;

architecture rtl of uart_assembler is

signal wave_unit_select_int			: std_logic_vector(wave_unit_select'length-1 downto 0) := (others => '0');
signal wave_unit_select_nxt			: std_logic_vector(wave_unit_select_int'length-1 downto 0) := (others => '0');

signal type_request_int					: std_logic_vector(type_request'length-1 downto 0) := (others => '0');
signal type_request_nxt					: std_logic_vector(type_request'length-1 downto 0) := (others => '0');

signal function_select_int				: std_logic_vector(function_select'length-1 downto 0) := (others => '0');
signal function_select_nxt				: std_logic_vector(function_select'length-1 downto 0) := (others => '0');

signal frequency_select_int			: std_logic_vector(frequency_select'length-1 downto 0) := (others => '0');
signal frequency_select_nxt			: std_logic_vector(frequency_select'length-1 downto 0) := (others => '0');

signal mult_select_int					: std_logic_vector(mult_select'length-1 downto 0) := (others => '0');
signal mult_select_nxt					: std_logic_vector(mult_select'length-1 downto 0) := (others => '0');

signal phasereference_select_int		: std_logic_vector(phasereference_select'length-1 downto 0) := (others => '0');
signal phasereference_select_nxt		: std_logic_vector(phasereference_select'length-1 downto 0) := (others => '0');

signal phase_value_select_int			: std_logic_vector(phase_value_select'length-1 downto 0) := (others => '0');
signal phase_value_select_nxt			: std_logic_vector(phase_value_select'length-1 downto 0) := (others => '0');

signal write_custom_request_int		: std_logic_vector(write_custom_request'length-1 downto 0) := (others => '0');
signal write_custom_request_nxt		: std_logic_vector(write_custom_request'length-1 downto 0) := (others => '0');

signal address_request_select_int	: std_logic_vector(address_request'length-1 downto 0) := (others => '0');
signal address_request_select_nxt	: std_logic_vector(address_request'length-1 downto 0) := (others => '0');

signal pwm_value_request_int			: std_logic_vector(pwm_value_request'length-1 downto 0) := (others => '0');
signal pwm_value_request_nxt			: std_logic_vector(pwm_value_request'length-1 downto 0) := (others => '0');



type STATE_UART  		is (IDLE, CMD_FIN, MOTOR_SELECT, MOTOR_SELECTED, TYPE_FREQ, TYPE_MUL, TYPE_FUNC, TYPE_PHASE, TYPE_REQUEST);

type STATE_FREQ  		is (IDLE, VAL_0, VAL_1, FIN);

type STATE_MUL   		is (IDLE, VAL_0, FIN);

type STATE_FUNC  		is (IDLE, VAL_0, FIN);


type STATE_PHASE 		is (IDLE, VAL_0, VAL_1, WAVE_REF ,FIN);

type STATE_REQUEST	is (IDLE, REQUEST_TYPE, GET_DATA, DATA_OUT, SENT);

signal state, state_nxt 						: STATE_UART;

signal state_freq, state_freq_nxt 			: STATE_FREQ;
signal state_func, state_func_nxt 			: STATE_FUNC;
signal state_mul, state_mul_nxt 				: STATE_MUL;
signal state_phase, state_phase_nxt 		: STATE_PHASE;
signal state_request, state_request_nxt	: STATE_REQUEST;

begin

	ff:
		process(reset,clock)
			begin	
				if reset = '1' then
					state <= IDLE;
					state_freq <= IDLE;
					state_func <= IDLE;
					state_mul <= IDLE;
					state_phase <= IDLE;
					state_request <= IDLE;
				elsif rising_edge(clock) then
					state <= state_nxt;
					state_freq <= state_freq_nxt;
					state_func <= state_func_nxt;
					state_mul <= state_mul_nxt;
					state_phase <= state_phase_nxt;
					state_request <= state_request_nxt;
				end if;
	end process ff;

	state_machine:	 
		process(state,state_freq,state_func,state_mul,state_phase,state_request)
		begin
			state_nxt 							<= state; 
			state_freq_nxt 					<= state_freq; 
			state_func_nxt 					<= state_func; 
			state_mul_nxt 						<= state_mul; 
			state_phase_nxt 					<= state_phase; 
			state_request_nxt 				<= state_request; 
			
			wave_unit_select_nxt				<= wave_unit_select_int;
			type_request_nxt					<= type_request_int;
			function_select_nxt				<= function_select_int;
			frequency_select_nxt				<= frequency_select_int;
			mult_select_nxt					<= mult_select_int;
			phasereference_select_nxt		<= phasereference_select_int;
			phase_value_select_nxt			<= phase_value_select_int;
			write_custom_request_nxt		<= write_custom_request_int;
			address_request_select_nxt		<= address_request_select_int;
			pwm_value_request_nxt			<= pwm_value_request_int;
			
			write_custom_request	<= '0';
			address_request		<= (others => '0');
			pwm_value_request		<= (others => '0');
			
			
			case state is
				when INIT =>	
				
				when MOTOR_SELECT =>
				
				when TYPE_FREQ =>
					case state_freq is
						when IDLE =>
							
						when VAL_0 =>
							
						when VAL_1 =>
							
						when FIN =>
							
					end case;
			
				when TYPE_MUL =>
					case state_mul is
						when IDLE =>
							
						when VAL_0 =>
							
						when FIN =>
							
					end case;
				when TYPE_FUNC =>
					case state_func is
						when IDLE =>
							
						when VAL_0 =>
							
						when FIN =>
							
					end case;
				when TYPE_PHASE =>
					case state_freq is
						when IDLE =>
							
						when VAL_0 =>
							
						when VAL_1 =>
							
						when WAVE_REF =>
							
						when FIN =>
							
					end case;
					
				when TYPE_REQUEST =>
					case state_freq is
						when IDLE =>
							
						when REQUEST_TYPE =>
							
						when GET_DATA =>
							
						when DATA_OUT =>
							
						when SENT =>
							
					end case;
				when CMD_FIN =>
			end case;
	end process state_machine;	
	
	
end rtl;