library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

entity gain_unit is
	generic (
		MAX_VALUE	: integer := 512  -- Number of Steps
	);
	port (
		clock 		: in  std_ulogic;
		enable		: in  std_ulogic;
		
		amp			: in  std_ulogic_vector(7 downto 0);
		period_on	: in  std_logic_vector(9 downto 0);
		
		result		: out std_logic_vector(9 downto 0);
    );
end gain_unit;

architecture rtl of gain_unit is

signal mul_res			: std_logic_vector(16 downto 0):= (others => '0');
signal amp_int			: std_logic_vector(7 downto 0):= (others => '0');
signal period_on_int	: std_logic_vector(9 downto 0):= (others => '0');


component amp_mul is
	PORT
	(
		dataa		: in  std_logic_vector (9 downto 0);
		datab		: in  std_logic_vector (7 downto 0);
		result	: out std_logic_vector (16 downto 0)
	);
end component amp_mul;


begin
	
	gain_pwm: mul_pwm 
		port map(
			dataa 	=> period_on_int,
			datab		=> amp_int,
			result	=> mul_res
		 );	

--	ff:
--		process(reset,clock)
--				begin	
--					if reset = '1' then
--						count_sig	<= (others => '0');						
--					elsif rising_edge(clock) then
--						count_sig	<= count_nxt;
--					end if;
--	end process ff;	

	ff:
		process(enable)
				begin	
					if enable = '1' then
						result			<= std_logic_vector(unsigned(mul_res) - shift_right(unsigned(mul_res), 6) - shift_right(unsigned(mul_res), 5) - shift_right(unsigned(mul_res), 2));					
						period_on_int	<= period_on
						amp_int			<= std_logic_vector(unsigned(amp_int));
					else
						result			<= (others => '0');	
						period_on_int	<= (others => '0');	
						amp_int			<= (others => '0');	
					end if;
	end process ff;	


end architecture rtl;